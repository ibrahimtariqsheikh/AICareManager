generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String           @unique
  token     String           @unique
  role      Role
  subRole   SubRole?
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  inviterId String
  inviter   User             @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
}

model Agency {
  id                         String                   @id @default(cuid())
  name                       String
  email                      String                   @default("example@agency.com")
  description                String?
  address                    String?
  extension                  Int?
  mobileNumber               Int?
  landlineNumber             Int?
  website                    String?
  logo                       String?
  primaryColor               String?
  secondaryColor             String?
  isActive                   Boolean                  @default(true)
  isSuspended                Boolean                  @default(false)
  hasScheduleV2              Boolean                  @default(true)
  hasEMAR                    Boolean                  @default(false)
  hasFinance                 Boolean                  @default(false)
  isWeek1And2ScheduleEnabled Boolean                  @default(false)
  hasPoliciesAndProcedures   Boolean                  @default(false)
  isTestAccount              Boolean                  @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  licenseNumber              String?
  timeZone                   String                   @default("UTC")
  currency                   String                   @default("CAD")
  maxUsers                   Int?
  maxClients                 Int?
  maxCareWorkers             Int?
  announcements              Announcement[]
  auditLogs                  AuditLog[]
  certifications             Certification[]
  customTasks                CustomTask[]
  documents                  Document[]               @relation("AgencyDocuments")
  groups                     Group[]
  incidentReports            IncidentReport[]
  invoices                   Invoice[]
  medications                MedicationDatabaseLink[]
  mileageRecords             MileageRecord[]
  operatingHours             OperatingHours[]
  rateSheets                 RateSheet[]
  reminders                  Reminder[]
  Report                     Report[]
  riskCategories             RiskCategory[]
  schedules                  Schedule[]
  users                      User[]
  ownerId                    String?
  owner                      User?                    @relation("AgencyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  visitTypes                 VisitType[]
}

model Announcement {
  id                     String               @id @default(cuid())
  title                  String
  content                String
  priority               AnnouncementPriority @default(NORMAL)
  status                 AnnouncementStatus   @default(DRAFT)
  publishDate            DateTime?
  expiryDate             DateTime?
  isSticky               Boolean              @default(false)
  requiresAcknowledgment Boolean              @default(false)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  agencyId               String
  createdById            String
  targetRoles            Role[]
  attachmentUrl          String?
  attachmentType         String?
  userId                 String?
  agency                 Agency               @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdBy              User                 @relation("AnnouncementCreator", fields: [createdById], references: [id])
  User                   User?                @relation(fields: [userId], references: [id])
  acknowledgedBy         User[]               @relation("AnnouncementAcknowledgements")

  @@index([agencyId])
  @@index([publishDate])
  @@index([status])
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entityType  String
  entityId    String
  description String
  changes     Json?
  ipAddress   String?
  userAgent   String?
  performedAt DateTime    @default(now())
  agencyId    String
  userId      String?
  agency      Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id])

  @@index([agencyId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([performedAt])
}

model Certification {
  id                String              @id @default(cuid())
  name              String
  issuingAuthority  String
  certificationCode String?
  issueDate         DateTime
  expiryDate        DateTime
  status            CertificationStatus @default(ACTIVE)
  documentUrl       String?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  agencyId          String
  agency            Agency              @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model OperatingHours {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  isOpen    Boolean   @default(true)
  openTime  String    @default("09:00")
  closeTime String    @default("17:00")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  agencyId  String
  agency    Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, dayOfWeek])
  @@index([agencyId])
}

model Group {
  id        String   @id @default(cuid())
  name      String
  agencyId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  clients   User[]
}

model RateSheet {
  id         String        @id @default(cuid())
  name       String
  hourlyRate Float
  staffType  RateSheetType
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  agencyId   String?
  Agency     Agency?       @relation(fields: [agencyId], references: [id])
}

model CustomTask {
  id          String              @id @default(cuid())
  name        String
  placeholder String
  category    CustomTaskCategory
  frequency   CustomTaskFrequency
  priority    CustomTaskPriority
  icon        String?
  agencyId    String?
  Agency      Agency?             @relation(fields: [agencyId], references: [id])
}

model ClientCareAssignment {
  id              String   @id @default(cuid())
  clientId        String
  userId          String
  isDecisionMaker Boolean  @default(false)
  assignedAt      DateTime @default(now())
  client          User     @relation("ClientAssignments", fields: [clientId], references: [id], onDelete: Cascade)
  user            User     @relation("CareWorkerAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
}

model User {
  id                        String                     @id @default(cuid())
  cognitoId                 String                     @unique
  email                     String                     @unique
  firstName                 String
  lastName                  String
  role                      Role
  subRole                   SubRole?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  agencyId                  String?
  invitedById               String?
  title                     String?
  addressLine1              String?
  addressLine2              String?
  townOrCity                String?
  county                    String?
  postalCode                String?
  propertyAccess            String?
  phoneNumber               String?
  nhsNumber                 String?
  dnraOrder                 Boolean?                   @default(false)
  chargeRate                Float?                     @default(25.0)
  mobility                  String?
  likesDislikes             String?
  dateOfBirth               DateTime?
  languages                 String?
  allergies                 String?
  interests                 String?
  history                   String?
  preferredName             String?
  groupId                   String?
  createdAnnouncements      Announcement[]             @relation("AnnouncementCreator")
  Announcement              Announcement[]
  AuditLog                  AuditLog[]
  careOutcomes              CareOutcome[]
  clientAssignments         ClientCareAssignment[]     @relation("ClientAssignments")
  careAssignments           ClientCareAssignment[]     @relation("CareWorkerAssignments")
  communicationLogs         CommunicationLog[]
  communicationPreference   CommunicationPreference?
  Document                  Document[]
  documents                 Document[]                 @relation("UserDocuments")
  familyAccess              FamilyAccess[]
  incidentReports           IncidentReport[]
  sentInvitations           Invitation[]               @relation("SentInvitations")
  Invoice                   Invoice[]
  keyContacts               KeyContact[]
  medicationAdministrations MedicationAdministration[] @relation("AdministeredMedications")
  careWorkerMedications     MedicationRecord[]         @relation("CareWorkerMedications")
  clientMedications         MedicationRecord[]         @relation("ClientMedications")
  receivedMessages          Message[]                  @relation("MessageReceiver")
  sentMessages              Message[]                  @relation("MessageSender")
  careWorkerMileage         MileageRecord[]            @relation("CareWorkerMileage")
  clientMileage             MileageRecord[]            @relation("ClientMileage")
  Notification              Notification[]
  profile                   Profile?
  reminders                 Reminder[]
  clientReports             Report[]                   @relation("ReportClient")
  careReports               Report[]                   @relation("ReportCaregiver")
  reportEdits               ReportEdit[]
  riskAssessments           RiskAssessment[]
  clientSchedules           Schedule[]                 @relation("ClientSchedules")
  careWorkerSchedules       Schedule[]                 @relation("CareWorkerSchedules")
  agency                    Agency?                    @relation(fields: [agencyId], references: [id])
  agenciesOwned             Agency[]                   @relation("AgencyOwner")
  Group                     Group?                     @relation(fields: [groupId], references: [id])
  invitedBy                 User?                      @relation("UserInvites", fields: [invitedById], references: [id])
  invitedUsers              User[]                     @relation("UserInvites")
  acknowledgedAnnouncements Announcement[]             @relation("AnnouncementAcknowledgements")
}

model CommunicationPreference {
  id     String  @id @default(cuid())
  userId String  @unique
  email  Boolean @default(true)
  sms    Boolean @default(false)
  phone  Boolean @default(true)
  notes  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FamilyAccess {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?
  client   User    @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model MedicationDatabaseLink {
  id               String             @id @default(cuid())
  name             String
  isSpecialist     Boolean            @default(false)
  url              String
  source           String
  agencyId         String
  agency           Agency             @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  MedicationRecord MedicationRecord[]
}

model VisitType {
  id          String     @id @default(cuid())
  agencyId    String
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  schedules   Schedule[]
  agency      Agency     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          String       @id @default(cuid())
  agencyId    String
  clientId    String
  userId      String
  date        DateTime
  startTime   String
  endTime     String
  status      String       @default("PENDING")
  type        ScheduleType @default(APPOINTMENT)
  notes       String?
  chargeRate  Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  visitTypeId String?
  agency      Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client      User         @relation("ClientSchedules", fields: [clientId], references: [id], onDelete: Cascade)
  user        User         @relation("CareWorkerSchedules", fields: [userId], references: [id], onDelete: Cascade)
  visitType   VisitType?   @relation(fields: [visitTypeId], references: [id])

  @@unique([userId, clientId, date, startTime, endTime], name: "unique_schedule_appointment")
  @@index([userId, date])
  @@index([clientId, date])
  @@index([agencyId])
}

model Report {
  id                        String                     @id @default(cuid())
  clientId                  String
  agencyId                  String
  userId                    String
  title                     String?
  condition                 String
  summary                   String
  checkInTime               DateTime
  checkOutTime              DateTime?
  createdAt                 DateTime                   @default(now())
  checkInDistance           Float?
  checkOutDistance          Float?
  checkInLocation           String?
  checkOutLocation          String?
  hasSignature              Boolean                    @default(false)
  signatureImageUrl         String?
  status                    ReportStatus               @default(COMPLETED)
  lastEditedAt              DateTime?
  lastEditedBy              String?
  lastEditReason            String?
  bodyMapObservations       BodyMapObservation[]
  medicationAdministrations MedicationAdministration[]
  agency                    Agency                     @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client                    User                       @relation("ReportClient", fields: [clientId], references: [id], onDelete: Cascade)
  caregiver                 User                       @relation("ReportCaregiver", fields: [userId], references: [id], onDelete: Cascade)
  alerts                    ReportAlert[]
  editHistory               ReportEdit[]
  tasksCompleted            ReportTask[]
}

model ReportTask {
  id          String    @id @default(cuid())
  reportId    String
  taskName    String
  completed   Boolean   @default(false)
  notes       String?
  taskIcon    String?
  taskType    String?
  completedAt DateTime?
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportAlert {
  id         String        @id @default(cuid())
  reportId   String
  type       AlertType
  message    String
  severity   AlertSeverity
  createdAt  DateTime      @default(now())
  resolved   Boolean       @default(false)
  resolvedAt DateTime?
  resolvedBy String?
  report     Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model BodyMapObservation {
  id        String   @id @default(cuid())
  reportId  String
  bodyPart  String
  condition String
  notes     String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportEdit {
  id          String   @id @default(cuid())
  reportId    String
  editedBy    String
  editedAt    DateTime @default(now())
  reason      String
  changesJson String
  editor      User     @relation(fields: [editedBy], references: [id], onDelete: Cascade)
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model MedicationRecord {
  id                    String                     @id @default(cuid())
  medicationId          String
  clientId              String
  userId                String
  dosage                String
  frequency             String
  startDate             DateTime
  endDate               DateTime?
  notes                 String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  morningDose           Boolean                    @default(false)
  lunchDose             Boolean                    @default(false)
  eveningDose           Boolean                    @default(false)
  bedtimeDose           Boolean                    @default(false)
  asNeededDose          Boolean                    @default(false)
  administrationRecords MedicationAdministration[]
  user                  User                       @relation("CareWorkerMedications", fields: [userId], references: [id], onDelete: Cascade, map: "MedicationRecord_care_worker_fkey")
  client                User                       @relation("ClientMedications", fields: [clientId], references: [id], onDelete: Cascade, map: "MedicationRecord_client_fkey")
  medication            MedicationDatabaseLink     @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@index([medicationId])
  @@index([clientId])
  @@index([userId])
}

model MedicationAdministration {
  id                 String           @id @default(cuid())
  medicationRecordId String
  administeredById   String
  administeredAt     DateTime
  doseType           DoseType
  doseTaken          Boolean          @default(true)
  notes              String?
  createdAt          DateTime         @default(now())
  reportId           String?
  administeredBy     User             @relation("AdministeredMedications", fields: [administeredById], references: [id], onDelete: Cascade)
  medicationRecord   MedicationRecord @relation(fields: [medicationRecordId], references: [id], onDelete: Cascade)
  report             Report?          @relation(fields: [reportId], references: [id])

  @@index([medicationRecordId])
  @@index([administeredById])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber Int           @default(autoincrement())
  agencyId      String
  clientId      String?
  amount        Float
  description   String
  issuedAt      DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus
  agency        Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client        User?         @relation(fields: [clientId], references: [id])
}

model MileageRecord {
  id           String   @id @default(cuid())
  agencyId     String
  clientId     String
  userId       String
  date         DateTime
  startMileage Float
  endMileage   Float
  totalMiles   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agency       Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user         User     @relation("CareWorkerMileage", fields: [userId], references: [id], onDelete: Cascade, map: "MileageRecord_care_worker_fkey")
  client       User     @relation("ClientMileage", fields: [clientId], references: [id], onDelete: Cascade, map: "MileageRecord_client_fkey")

  @@index([agencyId])
  @@index([clientId])
  @@index([userId])
}

model Document {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  uploadedAt DateTime @default(now())
  userId     String?
  clientId   String?
  agencyId   String?
  agency     Agency?  @relation("AgencyDocuments", fields: [agencyId], references: [id])
  client     User?    @relation(fields: [clientId], references: [id])
  user       User?    @relation("UserDocuments", fields: [userId], references: [id])
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  phone     String?
  avatarUrl String?
  address   String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IncidentReport {
  id          String        @id @default(cuid())
  reporterId  String
  agencyId    String
  description String
  severity    SeverityLevel
  reportedAt  DateTime      @default(now())
  agency      Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  reporter    User          @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
}

model KeyContact {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?
  client   User    @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CareOutcome {
  id       String @id @default(cuid())
  clientId String
  outcome  String
  client   User   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CommunicationLog {
  id        String   @id @default(cuid())
  clientId  String
  message   String
  createdAt DateTime @default(now())
  client    User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model RiskCategory {
  id              String           @id @default(cuid())
  agencyId        String
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  riskAssessments RiskAssessment[]
  agency          Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model RiskAssessment {
  id                 String       @id @default(cuid())
  clientId           String
  riskCategoryId     String
  description        String
  affectedParties    String
  mitigationStrategy String
  likelihood         Int
  severity           Int
  riskScore          Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  client             User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  riskCategory       RiskCategory @relation(fields: [riskCategoryId], references: [id], onDelete: Cascade)
}

model Reminder {
  id        String   @id @default(cuid())
  clientId  String
  title     String
  message   String?
  dueDate   DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])
  client    User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PERMISSION_CHANGE
  EXPORT
  IMPORT
  ARCHIVE
  RESTORE
  SYSTEM
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  PENDING
  REVOKED
  SUSPENDED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RateSheetType {
  CLIENT
  CARE_WORKER
  OFFICE_STAFF
}

enum CustomTaskCategory {
  HEALTH_MONITORING
  PERSONAL_CARE
  MEDICATION
  MEAL_PREPARATION
  OTHER
}

enum CustomTaskFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CustomTaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  SOFTWARE_OWNER
  ADMIN
  CARE_WORKER
  OFFICE_STAFF
  CLIENT
  FAMILY
}

enum SubRole {
  FINANCE_MANAGER
  HR_MANAGER
  CARE_MANAGER
  SCHEDULING_COORDINATOR
  OFFICE_ADMINISTRATOR
  RECEPTIONIST
  QUALITY_ASSURANCE_MANAGER
  MARKETING_COORDINATOR
  COMPLIANCE_OFFICER
  CAREGIVER
  SENIOR_CAREGIVER
  JUNIOR_CAREGIVER
  TRAINEE_CAREGIVER
  LIVE_IN_CAREGIVER
  PART_TIME_CAREGIVER
  SPECIALIZED_CAREGIVER
  NURSING_ASSISTANT
  SERVICE_USER
  FAMILY_AND_FRIENDS
  OTHER
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum ScheduleType {
  WEEKLY_CHECKUP
  APPOINTMENT
  HOME_VISIT
  CHECKUP
  EMERGENCY
  ROUTINE
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

enum NotificationType {
  SCHEDULE
  REPORT
  DOCUMENT
  SYSTEM
  ALERT
}

enum DoseType {
  MORNING
  LUNCH
  EVENING
  BEDTIME
  AS_NEEDED
}

enum ReportStatus {
  DRAFT
  COMPLETED
  EDITED
  FLAGGED
  REVIEWED
}

enum AlertType {
  MEDICATION
  INCIDENT
  HEALTH_CHANGE
  BEHAVIOR
  MISSED_TASK
  OTHER
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
