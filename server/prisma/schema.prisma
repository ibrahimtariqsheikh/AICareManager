generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Invitation {
  id        String           @id @default(cuid())
  email     String           @unique
  token     String           @unique
  role      Role
  subRole   SubRole?
  expiresAt DateTime
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  inviterId String
  inviter   User             @relation("SentInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
}

enum NotificationFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum PreferredNotificationMethod {
  EMAIL
  SMS
  PHONE
}

enum AlertType {
  INCIDENT
  ACCIDENT
  MEDICATION
  LATE_VISIT
  LOCATION
  HEALTH_CONCERN
  SAFEGUARDING_CONCERN
  CHALLENGING_BEHAVIOUR
  OTHER
}

model Alert {
  id           String    @id @default(cuid())
  type         AlertType
  description  String
  reportId     String?
  clientId     String?
  client       User?     @relation("AlertClient", fields: [clientId], references: [id])
  careworkerId String?
  careworker   User?     @relation("AlertCareworker", fields: [careworkerId], references: [id])
  report       Report?   @relation(fields: [reportId], references: [id])
  agencyId     String
  agency       Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  resolvedById String?
  resolvedBy   User?     @relation("AlertResolvedBy", fields: [resolvedById], references: [id])
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Agency {
  id                           String                      @id @default(cuid())
  name                         String
  email                        String                      @default("example@agency.com")
  description                  String?
  address                      String?
  extension                    String? // Changed from Int to String
  mobileNumber                 String? // Changed from Int to String
  landlineNumber               String? // Changed from Int to String
  website                      String?
  logo                         String?
  primaryColor                 String?
  secondaryColor               String?
  isActive                     Boolean                     @default(true)
  isSuspended                  Boolean                     @default(false)
  hasScheduleV2                Boolean                     @default(true)
  hasEMAR                      Boolean                     @default(false)
  hasFinance                   Boolean                     @default(false)
  isWeek1And2ScheduleEnabled   Boolean                     @default(false)
  hasPoliciesAndProcedures     Boolean                     @default(false)
  isTestAccount                Boolean                     @default(false)
  allowCareWorkersEditCheckIn  Boolean                     @default(false)
  allowFamilyReviews           Boolean                     @default(false)
  enableFamilySchedule         Boolean                     @default(false)
  enableWeek1And2Scheduling    Boolean                     @default(false)
  lateVisitThreshold           String                      @default("15")
  enableDistanceAlerts         Boolean                     @default(true)
  distanceThreshold            String                      @default("10")
  lateVisitAlerts              Boolean                     @default(true)
  clientBirthdayReminders      Boolean                     @default(true)
  careWorkerVisitAlerts        Boolean                     @default(true)
  missedMedicationAlerts       Boolean                     @default(true)
  clientAndCareWorkerReminders Boolean                     @default(true)
  distanceAlerts               Boolean                     @default(true)
  reviewNotifications          Boolean                     @default(true)
  preferredNotificationMethod  PreferredNotificationMethod @default(EMAIL)
  notificationFrequency        NotificationFrequency       @default(DAILY)
  createdAt                    DateTime                    @default(now())
  updatedAt                    DateTime                    @updatedAt
  licenseNumber                String?
  timeZone                     String                      @default("UTC")
  currency                     String                      @default("CAD")
  maxUsers                     Int?
  maxClients                   Int?
  maxCareWorkers               Int?
  announcements                Announcement[]
  auditLogs                    AuditLog[]
  certifications               Certification[]
  customTasks                  CustomTask[]
  documents                    Document[]                  @relation("AgencyDocuments")
  groups                       Group[]
  incidentReports              IncidentReport[]
  invoices                     Invoice[]
  alerts                       Alert[]

  mileageRecords    MileageRecord[]
  operatingHours    OperatingHours[]
  rateSheets        RateSheet[]
  reminders         Reminder[]
  reports           Report[] // Renamed from Report to reports
  riskCategories    RiskCategory[]
  schedules         Schedule[]
  users             User[]
  ownerId           String?
  owner             User?              @relation("AgencyOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  scheduleTemplates ScheduleTemplate[]
  messages          Message[]          @relation("MessageAgency")
  leaveEvents       LeaveEvent[] // Added relation field for LeaveEvent
  payrolls          Payroll[]
  Expenses          Expenses[]
}

model Announcement {
  id                     String               @id @default(cuid())
  title                  String
  content                String
  priority               AnnouncementPriority @default(NORMAL)
  status                 AnnouncementStatus   @default(DRAFT)
  publishDate            DateTime?
  expiryDate             DateTime?
  isSticky               Boolean              @default(false)
  requiresAcknowledgment Boolean              @default(false)
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  agencyId               String
  createdById            String
  targetRoles            Role[]
  attachmentUrl          String?
  attachmentType         String?
  userId                 String?
  agency                 Agency               @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdBy              User                 @relation("AnnouncementCreator", fields: [createdById], references: [id])
  user                   User?                @relation(fields: [userId], references: [id]) // Renamed from User to user
  acknowledgedBy         User[]               @relation("AnnouncementAcknowledgements")

  @@index([agencyId])
  @@index([publishDate])
  @@index([status])
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entityType  String
  entityId    String
  description String
  changes     Json?
  ipAddress   String?
  userAgent   String?
  performedAt DateTime    @default(now())
  agencyId    String
  userId      String?
  agency      Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user        User?       @relation(fields: [userId], references: [id])

  @@index([agencyId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([performedAt])
}

model Certification {
  id                String              @id @default(cuid())
  name              String
  issuingAuthority  String
  certificationCode String?
  issueDate         DateTime
  expiryDate        DateTime
  status            CertificationStatus @default(ACTIVE)
  documentUrl       String?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  agencyId          String
  agency            Agency              @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@index([agencyId])
}

model OperatingHours {
  id        String    @id @default(cuid())
  dayOfWeek DayOfWeek
  isOpen    Boolean   @default(true)
  openTime  String    @default("09:00")
  closeTime String    @default("17:00")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  agencyId  String
  agency    Agency    @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  @@unique([agencyId, dayOfWeek])
  @@index([agencyId])
}

model Group {
  id        String   @id @default(cuid())
  name      String
  agencyId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agency    Agency?  @relation(fields: [agencyId], references: [id]) // Renamed from Agency to agency
  clients   User[]   @relation("GroupUsers")
}

model RateSheet {
  id             String          @id @default(cuid())
  name           String
  hourlyRate     Float
  staffType      RateSheetType
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  agencyId       String?
  agency         Agency?         @relation(fields: [agencyId], references: [id])
  templateVisits TemplateVisit[]
  schedules      Schedule[]
}

model CustomTask {
  id          String              @id @default(cuid())
  name        String
  placeholder String
  category    CustomTaskCategory
  frequency   CustomTaskFrequency
  priority    CustomTaskPriority
  icon        String?
  agencyId    String?
  agency      Agency?             @relation(fields: [agencyId], references: [id]) // Renamed from Agency to agency
}

model ClientCareAssignment {
  id              String   @id @default(cuid())
  clientId        String
  userId          String
  isDecisionMaker Boolean  @default(false)
  assignedAt      DateTime @default(now())
  client          User     @relation("ClientAssignments", fields: [clientId], references: [id], onDelete: Cascade)
  user            User     @relation("CareWorkerAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientId, userId])
}

model Medication {
  id           String               @id @default(cuid())
  name         String
  dosage       String
  frequency    String
  instructions String?
  morning      Boolean              @default(false)
  afternoon    Boolean              @default(false)
  evening      Boolean              @default(false)
  bedtime      Boolean              @default(false)
  asNeeded     Boolean              @default(false)
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  visitTypeId  String?
  visitType    VisitType?           @relation(fields: [visitTypeId], references: [id])
  logs         MedicationLog[]
  snapshots    MedicationSnapshot[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@index([userId])
  @@index([visitTypeId])
}

enum MedicationTime {
  MORNING
  AFTERNOON
  EVENING
  BEDTIME
  AS_NEEDED
}

enum MedicationStatus {
  TAKEN
  NOT_TAKEN
  NOT_REPORTED
  NOT_SCHEDULED
}

model MedicationLog {
  id           String           @id @default(uuid())
  medication   Medication       @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  medicationId String
  date         DateTime
  status       MedicationStatus
  time         MedicationTime
  careworkerId String?
  notes        String?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([medicationId])
  @@index([userId])
  @@index([date])
}

model User {
  id             String    @id @default(cuid())
  cognitoId      String    @unique
  email          String    @unique
  fullName       String    @default("")
  preferredName  String?
  role           Role
  subRole        SubRole?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  agencyId       String?
  invitedById    String?
  address        String?
  city           String?
  province       String?
  postalCode     String?
  propertyAccess String?
  phoneNumber    String?
  nhsNumber      String?
  dnraOrder      Boolean?  @default(false)
  mobility       String?
  likesDislikes  String?
  dateOfBirth    DateTime?
  languages      String?
  allergies      String?
  interests      String?
  history        String?

  clientAlerts              Alert[]                   @relation("AlertClient")
  careworkerAlerts          Alert[]                   @relation("AlertCareworker")
  resolvedAlerts            Alert[]                   @relation("AlertResolvedBy")
  createdAnnouncements      Announcement[]            @relation("AnnouncementCreator")
  announcements             Announcement[]
  auditLogs                 AuditLog[]
  careOutcomes              CareOutcome[]
  clientAssignments         ClientCareAssignment[]    @relation("ClientAssignments")
  careAssignments           ClientCareAssignment[]    @relation("CareWorkerAssignments")
  communicationLogs         CommunicationLog[]
  communicationPreference   CommunicationPreference?
  documents                 Document[]
  userDocuments             Document[]                @relation("UserDocuments")
  familyAccess              FamilyAccess[]
  incidentReports           IncidentReport[]
  sentInvitations           Invitation[]              @relation("SentInvitations")
  invoices                  Invoice[]
  keyContacts               KeyContact[]
  sentMessages              Message[]                 @relation("MessageSender")
  conversations             ConversationParticipant[]
  sentConversations         Conversation[]            @relation("ConversationSender")
  receivedConversations     Conversation[]            @relation("ConversationReceiver")
  careWorkerMileage         MileageRecord[]           @relation("CareWorkerMileage")
  clientMileage             MileageRecord[]           @relation("ClientMileage")
  notifications             Notification[]
  profile                   Profile?
  reminders                 Reminder[]
  clientReports             Report[]                  @relation("ReportClient")
  careReports               Report[]                  @relation("ReportCaregiver")
  reportEdits               ReportEdit[]
  riskAssessments           RiskAssessment[]
  clientSchedules           Schedule[]                @relation("ClientSchedules")
  careWorkerSchedules       Schedule[]                @relation("CareWorkerSchedules")
  agency                    Agency?                   @relation(fields: [agencyId], references: [id])
  agenciesOwned             Agency[]                  @relation("AgencyOwner")
  groups                    Group[]                   @relation("GroupUsers")
  invitedBy                 User?                     @relation("UserInvites", fields: [invitedById], references: [id])
  invitedUsers              User[]                    @relation("UserInvites")
  acknowledgedAnnouncements Announcement[]            @relation("AnnouncementAcknowledgements")
  visitTypes                VisitType[]
  scheduleTemplates         ScheduleTemplate[]
  medications               Medication[]
  medicationLogs            MedicationLog[]
  leaveEvents               LeaveEvent[] // Added relation field for LeaveEvent
  Payroll                   Payroll[]
  expenses                  Expenses[] // Added relation field for Expenses
}

enum TemplateVisitDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TemplateVisitEndStatus {
  SAME_DAY
  NEXT_DAY
}

model Schedule {
  id          String       @id @default(cuid())
  agencyId    String
  clientId    String
  userId      String
  date        DateTime
  startTime   String
  endTime     String
  status      String       @default("PENDING")
  type        ScheduleType @default(APPOINTMENT)
  notes       String?
  rateSheetId String?
  rateSheet   RateSheet?   @relation(fields: [rateSheetId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  visitTypeId String?
  agency      Agency       @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client      User         @relation("ClientSchedules", fields: [clientId], references: [id], onDelete: Cascade)
  user        User         @relation("CareWorkerSchedules", fields: [userId], references: [id], onDelete: Cascade)
  visitType   VisitType?   @relation(fields: [visitTypeId], references: [id])

  @@unique([userId, clientId, date, startTime, endTime], name: "unique_schedule_appointment")
  @@index([userId, date])
  @@index([clientId, date])
  @@index([agencyId])
}

model TemplateVisit {
  id                String                 @id @default(cuid())
  name              String
  description       String?
  day               TemplateVisitDay
  startTime         String
  endTime           String
  endStatus         TemplateVisitEndStatus
  isAllDayVisit     Boolean                @default(false)
  rateSheetId       String?
  rateSheet         RateSheet?             @relation(fields: [rateSheetId], references: [id])
  clientVisitTypeId String? // Added field for relation
  clientVisitType   VisitType?             @relation(fields: [clientVisitTypeId], references: [id]) // Added proper relation
  careWorkerId      String
  careWorker2Id     String?
  careWorker3Id     String?
  templateId        String
  template          ScheduleTemplate       @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model ScheduleTemplate {
  id          String          @id @default(cuid())
  name        String
  description String?
  userId      String
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  agencyId    String
  visits      TemplateVisit[]
  agency      Agency          @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([agencyId])
}

model CommunicationPreference {
  id     String  @id @default(cuid())
  userId String  @unique
  email  Boolean @default(true)
  sms    Boolean @default(false)
  phone  Boolean @default(true)
  notes  String?
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FamilyAccess {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?
  client   User    @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum TaskType {
  MEDICATION
  BODYMAP
  FOOD
  DRINKS
  PERSONALCARE
  HYGIENE
  TOILET_ASSISTANCE
  REPOSITIONING
  COMPANIONSHIP
  LAUNDRY
  GROCERIES
  HOUSEWORK
  CHORES
  INCIDENT_RESPONSE
  FIRE_SAFETY
  BLOOD_PRESSURE
  VITALS
  OTHER
}

model Task {
  id              String       @id @default(cuid())
  type            TaskType
  careworkerNotes String?
  visitTypeId     String
  visitType       VisitType    @relation(fields: [visitTypeId], references: [id], onDelete: Cascade)
  reportTasks     ReportTask[]
}

model VisitType {
  id             String          @id @default(cuid())
  name           String
  description    String?
  assignedTasks  Task[]
  medications    Medication[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String
  user           User?           @relation(fields: [userId], references: [id])
  templateVisits TemplateVisit[]
  Schedule       Schedule[]
  reports        Report[]
}

model Report {
  id                  String               @id @default(cuid())
  clientId            String
  agencyId            String
  userId              String
  visitTypeId         String?
  title               String?
  condition           String
  summary             String
  checkInTime         DateTime
  checkOutTime        DateTime?
  createdAt           DateTime             @default(now())
  checkInDistance     Float?
  checkOutDistance    Float?
  checkInLocation     String?
  checkOutLocation    String?
  signatureImageUrl   String?
  status              ReportStatus         @default(COMPLETED)
  lastEditedAt        DateTime?
  lastEditedBy        String?
  lastEditReason      String?
  bodyMapObservations BodyMapObservation[]

  alerts             Alert[]
  agency             Agency               @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client             User                 @relation("ReportClient", fields: [clientId], references: [id], onDelete: Cascade)
  caregiver          User                 @relation("ReportCaregiver", fields: [userId], references: [id], onDelete: Cascade)
  visitType          VisitType?           @relation(fields: [visitTypeId], references: [id])
  visitSnapshot      VisitSnapshot?
  medicationSnapshot MedicationSnapshot[]

  editHistory    ReportEdit[]
  tasksCompleted ReportTask[]
}

model MedicationSnapshot {
  id           String     @id @default(cuid())
  reportId     String     @unique
  medicationId String
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  report       Report     @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model VisitSnapshot {
  id                   String         @id @default(cuid())
  reportId             String         @unique
  visitTypeName        String
  visitTypeDescription String?
  createdAt            DateTime       @default(now())
  report               Report         @relation(fields: [reportId], references: [id], onDelete: Cascade)
  taskSnapshots        TaskSnapshot[]
}

model TaskSnapshot {
  id              String        @id @default(cuid())
  visitSnapshotId String
  originalTaskId  String?
  taskType        TaskType
  taskName        String
  careworkerNotes String?
  visitSnapshot   VisitSnapshot @relation(fields: [visitSnapshotId], references: [id], onDelete: Cascade)

  @@index([visitSnapshotId])
  @@index([originalTaskId])
}

model ReportTask {
  id           String    @id @default(cuid())
  reportId     String
  taskId       String?
  taskName     String
  completed    Boolean   @default(false)
  notes        String?
  taskIcon     String?
  taskType     String?
  completedAt  DateTime?
  report       Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  originalTask Task?     @relation(fields: [taskId], references: [id])

  @@index([taskId])
}

model BodyMapObservation {
  id        String   @id @default(cuid())
  reportId  String
  bodyPart  String
  condition String
  notes     String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ReportEdit {
  id          String   @id @default(cuid())
  reportId    String
  editedBy    String
  editedAt    DateTime @default(now())
  reason      String
  changesJson String
  editor      User     @relation(fields: [editedBy], references: [id], onDelete: Cascade)
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

enum ExpenseType {
  COMPANY
  CLIENT
  CARE_WORKER
  OFFICE_STAFF
}

enum ExpenseAssociatedEntity {
  CLIENT
  CARE_WORKER
  OFFICE_STAFF
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  LODGING
  OTHER
}

model Expenses {
  id               String                  @id @default(cuid())
  expenseNumber    Int                     @default(autoincrement())
  type             ExpenseType
  associatedEntity ExpenseAssociatedEntity
  category         ExpenseCategory
  description      String
  amount           Float
  date             DateTime
  agencyId         String
  userId           String
  user             User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  agency           Agency                  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model Payroll {
  id                      String   @id @default(cuid())
  payrollNumber           Int      @default(autoincrement())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  agencyId                String
  agency                  Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  expensesFromDate        DateTime
  expensesToDate          DateTime
  scheduleFromDate        DateTime
  scheduleToDate          DateTime
  calculatedScheduleHours Float
  calculatedExpenses      Float
  totalEarnings           Float
  totalDeductions         Float
  netPay                  Float
  taxRate                 Float
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum InvoicePaymentMethod {
  CASH
  CHEQUE
  CARD
  BANK_TRANSFER
  OTHER
}

model Invoice {
  id            String                @id @default(cuid())
  invoiceNumber Int                   @default(autoincrement())
  agencyId      String
  clientId      String?
  amount        Float
  description   String
  status        InvoiceStatus         @default(PENDING)
  issuedAt      DateTime              @default(now())
  dueDate       DateTime
  paymentMethod InvoicePaymentMethod?
  agency        Agency                @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  client        User?                 @relation(fields: [clientId], references: [id])
}

model MileageRecord {
  id           String   @id @default(cuid())
  agencyId     String
  clientId     String
  userId       String
  date         DateTime
  startMileage Float
  endMileage   Float
  totalMiles   Float
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  agency       Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user         User     @relation("CareWorkerMileage", fields: [userId], references: [id], onDelete: Cascade, map: "MileageRecord_care_worker_fkey")
  client       User     @relation("ClientMileage", fields: [clientId], references: [id], onDelete: Cascade, map: "MileageRecord_client_fkey")

  @@index([agencyId])
  @@index([clientId])
  @@index([userId])
}

model Document {
  id         String   @id @default(cuid())
  title      String
  fileUrl    String
  uploadedAt DateTime @default(now())
  userId     String?
  clientId   String?
  agencyId   String?
  agency     Agency?  @relation("AgencyDocuments", fields: [agencyId], references: [id])
  client     User?    @relation(fields: [clientId], references: [id])
  user       User?    @relation("UserDocuments", fields: [userId], references: [id])
}

model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  phone     String?
  avatarUrl String?
  address   String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IncidentReport {
  id          String        @id @default(cuid())
  reporterId  String
  agencyId    String
  description String
  severity    SeverityLevel
  reportedAt  DateTime      @default(now())
  agency      Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  reporter    User          @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  sentAt         DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isRead         Boolean      @default(false)
  isTyping       Boolean      @default(false)
  sender         User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  agencyId       String?
  agency         Agency?      @relation("MessageAgency", fields: [agencyId], references: [id])
  createdAt      DateTime     @default(now())

  @@index([senderId])
  @@index([conversationId])
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  messages     Message[]
  senderId     String
  sender       User                      @relation("ConversationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId   String
  receiver     User                      @relation("ConversationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]

  @@unique([senderId, receiverId])
  @@unique([receiverId, senderId])
  @@index([senderId])
  @@index([receiverId])
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}

model KeyContact {
  id       String  @id @default(cuid())
  clientId String
  name     String
  relation String
  phone    String
  email    String?
  client   User    @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CareOutcome {
  id       String @id @default(cuid())
  clientId String
  outcome  String
  client   User   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model CommunicationLog {
  id        String   @id @default(cuid())
  clientId  String
  message   String
  createdAt DateTime @default(now())
  client    User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model RiskCategory {
  id              String           @id @default(cuid())
  agencyId        String
  name            String
  description     String?
  createdAt       DateTime         @default(now())
  riskAssessments RiskAssessment[]
  agency          Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
}

model RiskAssessment {
  id                 String       @id @default(cuid())
  clientId           String
  riskCategoryId     String
  description        String
  affectedParties    String
  mitigationStrategy String
  likelihood         Int
  severity           Int
  riskScore          Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  client             User         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  riskCategory       RiskCategory @relation(fields: [riskCategoryId], references: [id], onDelete: Cascade)
}

model Reminder {
  id        String   @id @default(cuid())
  clientId  String
  title     String
  message   String?
  dueDate   DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  agencyId  String?
  agency    Agency?  @relation(fields: [agencyId], references: [id])
  client    User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  PERMISSION_CHANGE
  EXPORT
  IMPORT
  ARCHIVE
  RESTORE
  SYSTEM
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  PENDING
  REVOKED
  SUSPENDED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RateSheetType {
  CLIENT
  CARE_WORKER
  OFFICE_STAFF
}

enum CustomTaskCategory {
  HEALTH_MONITORING
  PERSONAL_CARE
  MEDICATION
  MEAL_PREPARATION
  OTHER
}

enum CustomTaskFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum CustomTaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum Role {
  SOFTWARE_OWNER
  ADMIN
  CARE_WORKER
  OFFICE_STAFF
  CLIENT
  FAMILY
}

enum LeaveEventType {
  ANNUAL_LEAVE
  SICK_LEAVE
  PUBLIC_HOLIDAY
  UNPAID_LEAVE
  MATERNITY_LEAVE
  PATERNITY_LEAVE
  BEREAVEMENT_LEAVE
  EMERGENCY_LEAVE
  MEDICAL_APPOINTMENT
  TOIL
  OTHER
}

model LeaveEvent {
  id        String         @id @default(cuid())
  eventType LeaveEventType
  startDate DateTime
  endDate   DateTime
  notes     String?
  payRate   Float?
  color     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String?
  user      User?          @relation(fields: [userId], references: [id])
  agencyId  String?
  agency    Agency?        @relation(fields: [agencyId], references: [id])
}

enum SubRole {
  FINANCE_MANAGER
  HR_MANAGER
  CARE_MANAGER
  SCHEDULING_COORDINATOR
  OFFICE_ADMINISTRATOR
  RECEPTIONIST
  QUALITY_ASSURANCE_MANAGER
  MARKETING_COORDINATOR
  COMPLIANCE_OFFICER
  CAREGIVER
  SENIOR_CAREGIVER
  JUNIOR_CAREGIVER
  TRAINEE_CAREGIVER
  LIVE_IN_CAREGIVER
  PART_TIME_CAREGIVER
  SPECIALIZED_CAREGIVER
  NURSING_ASSISTANT
  SERVICE_USER
  FAMILY_AND_FRIENDS
  OTHER
}

enum ScheduleStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum ScheduleType {
  WEEKLY_CHECKUP
  APPOINTMENT
  HOME_VISIT
  CHECKUP
  EMERGENCY
  ROUTINE
  OTHER
}

enum SeverityLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELED
}

enum NotificationType {
  SCHEDULE
  REPORT
  DOCUMENT
  SYSTEM
  ALERT
}

enum DoseType {
  MORNING
  LUNCH
  EVENING
  BEDTIME
  AS_NEEDED
}

enum ReportStatus {
  DRAFT
  COMPLETED
  EDITED
  FLAGGED
  REVIEWED
}
